// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"github.com/ONSdigital/dp-dimension-extractor/service"
	"sync"
)

var (
	lockDatasetClientMockGetInstance            sync.RWMutex
	lockDatasetClientMockPostInstanceDimensions sync.RWMutex
	lockDatasetClientMockPutInstanceData        sync.RWMutex
)

// Ensure, that DatasetClientMock does implement service.DatasetClient.
// If this is not the case, regenerate this file with moq.
var _ service.DatasetClient = &DatasetClientMock{}

// DatasetClientMock is a mock implementation of service.DatasetClient.
//
//     func TestSomethingThatUsesDatasetClient(t *testing.T) {
//
//         // make and configure a mocked service.DatasetClient
//         mockedDatasetClient := &DatasetClientMock{
//             GetInstanceFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error) {
// 	               panic("mock out the GetInstance method")
//             },
//             PostInstanceDimensionsFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error {
// 	               panic("mock out the PostInstanceDimensions method")
//             },
//             PutInstanceDataFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.JobInstance) error {
// 	               panic("mock out the PutInstanceData method")
//             },
//         }
//
//         // use mockedDatasetClient in code that requires service.DatasetClient
//         // and then make assertions.
//
//     }
type DatasetClientMock struct {
	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error)

	// PostInstanceDimensionsFunc mocks the PostInstanceDimensions method.
	PostInstanceDimensionsFunc func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error

	// PutInstanceDataFunc mocks the PutInstanceData method.
	PutInstanceDataFunc func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.JobInstance) error

	// calls tracks calls to the methods.
	calls struct {
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// PostInstanceDimensions holds details about calls to the PostInstanceDimensions method.
		PostInstanceDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Data is the data argument value.
			Data dataset.OptionPost
		}
		// PutInstanceData holds details about calls to the PutInstanceData method.
		PutInstanceData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Data is the data argument value.
			Data dataset.JobInstance
		}
	}
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetClientMock) GetInstance(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("DatasetClientMock.GetInstanceFunc: method is nil but DatasetClient.GetInstance was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		InstanceID:       instanceID,
	}
	lockDatasetClientMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockDatasetClientMockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, userAuthToken, serviceAuthToken, collectionID, instanceID)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetClient.GetInstanceCalls())
func (mock *DatasetClientMock) GetInstanceCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	InstanceID       string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
	}
	lockDatasetClientMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockDatasetClientMockGetInstance.RUnlock()
	return calls
}

// PostInstanceDimensions calls PostInstanceDimensionsFunc.
func (mock *DatasetClientMock) PostInstanceDimensions(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error {
	if mock.PostInstanceDimensionsFunc == nil {
		panic("DatasetClientMock.PostInstanceDimensionsFunc: method is nil but DatasetClient.PostInstanceDimensions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.OptionPost
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		Data:             data,
	}
	lockDatasetClientMockPostInstanceDimensions.Lock()
	mock.calls.PostInstanceDimensions = append(mock.calls.PostInstanceDimensions, callInfo)
	lockDatasetClientMockPostInstanceDimensions.Unlock()
	return mock.PostInstanceDimensionsFunc(ctx, serviceAuthToken, instanceID, data)
}

// PostInstanceDimensionsCalls gets all the calls that were made to PostInstanceDimensions.
// Check the length with:
//     len(mockedDatasetClient.PostInstanceDimensionsCalls())
func (mock *DatasetClientMock) PostInstanceDimensionsCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	Data             dataset.OptionPost
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.OptionPost
	}
	lockDatasetClientMockPostInstanceDimensions.RLock()
	calls = mock.calls.PostInstanceDimensions
	lockDatasetClientMockPostInstanceDimensions.RUnlock()
	return calls
}

// PutInstanceData calls PutInstanceDataFunc.
func (mock *DatasetClientMock) PutInstanceData(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.JobInstance) error {
	if mock.PutInstanceDataFunc == nil {
		panic("DatasetClientMock.PutInstanceDataFunc: method is nil but DatasetClient.PutInstanceData was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.JobInstance
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		Data:             data,
	}
	lockDatasetClientMockPutInstanceData.Lock()
	mock.calls.PutInstanceData = append(mock.calls.PutInstanceData, callInfo)
	lockDatasetClientMockPutInstanceData.Unlock()
	return mock.PutInstanceDataFunc(ctx, serviceAuthToken, instanceID, data)
}

// PutInstanceDataCalls gets all the calls that were made to PutInstanceData.
// Check the length with:
//     len(mockedDatasetClient.PutInstanceDataCalls())
func (mock *DatasetClientMock) PutInstanceDataCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	Data             dataset.JobInstance
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.JobInstance
	}
	lockDatasetClientMockPutInstanceData.RLock()
	calls = mock.calls.PutInstanceData
	lockDatasetClientMockPutInstanceData.RUnlock()
	return calls
}
