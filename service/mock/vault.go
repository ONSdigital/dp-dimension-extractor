// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-dimension-extractor/service"
	"sync"
)

// Ensure, that VaultClientMock does implement service.VaultClient.
// If this is not the case, regenerate this file with moq.
var _ service.VaultClient = &VaultClientMock{}

// VaultClientMock is a mock implementation of service.VaultClient.
//
//	func TestSomethingThatUsesVaultClient(t *testing.T) {
//
//		// make and configure a mocked service.VaultClient
//		mockedVaultClient := &VaultClientMock{
//			ReadKeyFunc: func(path string, key string) (string, error) {
//				panic("mock out the ReadKey method")
//			},
//		}
//
//		// use mockedVaultClient in code that requires service.VaultClient
//		// and then make assertions.
//
//	}
type VaultClientMock struct {
	// ReadKeyFunc mocks the ReadKey method.
	ReadKeyFunc func(path string, key string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadKey holds details about calls to the ReadKey method.
		ReadKey []struct {
			// Path is the path argument value.
			Path string
			// Key is the key argument value.
			Key string
		}
	}
	lockReadKey sync.RWMutex
}

// ReadKey calls ReadKeyFunc.
func (mock *VaultClientMock) ReadKey(path string, key string) (string, error) {
	if mock.ReadKeyFunc == nil {
		panic("VaultClientMock.ReadKeyFunc: method is nil but VaultClient.ReadKey was just called")
	}
	callInfo := struct {
		Path string
		Key  string
	}{
		Path: path,
		Key:  key,
	}
	mock.lockReadKey.Lock()
	mock.calls.ReadKey = append(mock.calls.ReadKey, callInfo)
	mock.lockReadKey.Unlock()
	return mock.ReadKeyFunc(path, key)
}

// ReadKeyCalls gets all the calls that were made to ReadKey.
// Check the length with:
//
//	len(mockedVaultClient.ReadKeyCalls())
func (mock *VaultClientMock) ReadKeyCalls() []struct {
	Path string
	Key  string
} {
	var calls []struct {
		Path string
		Key  string
	}
	mock.lockReadKey.RLock()
	calls = mock.calls.ReadKey
	mock.lockReadKey.RUnlock()
	return calls
}
