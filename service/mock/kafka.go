// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-dimension-extractor/service"
	kafka "github.com/ONSdigital/dp-kafka/v2"
	"golang.org/x/net/context"
	"sync"
)

// Ensure, that KafkaProducerMock does implement service.KafkaProducer.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaProducer = &KafkaProducerMock{}

// KafkaProducerMock is a mock implementation of service.KafkaProducer.
//
//	func TestSomethingThatUsesKafkaProducer(t *testing.T) {
//
//		// make and configure a mocked service.KafkaProducer
//		mockedKafkaProducer := &KafkaProducerMock{
//			ChannelsFunc: func() *kafka.ProducerChannels {
//				panic("mock out the Channels method")
//			},
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//		}
//
//		// use mockedKafkaProducer in code that requires service.KafkaProducer
//		// and then make assertions.
//
//	}
type KafkaProducerMock struct {
	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func() *kafka.ProducerChannels

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Channels holds details about calls to the Channels method.
		Channels []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockChannels sync.RWMutex
	lockClose    sync.RWMutex
}

// Channels calls ChannelsFunc.
func (mock *KafkaProducerMock) Channels() *kafka.ProducerChannels {
	if mock.ChannelsFunc == nil {
		panic("KafkaProducerMock.ChannelsFunc: method is nil but KafkaProducer.Channels was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	mock.lockChannels.Unlock()
	return mock.ChannelsFunc()
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//
//	len(mockedKafkaProducer.ChannelsCalls())
func (mock *KafkaProducerMock) ChannelsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChannels.RLock()
	calls = mock.calls.Channels
	mock.lockChannels.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *KafkaProducerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("KafkaProducerMock.CloseFunc: method is nil but KafkaProducer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKafkaProducer.CloseCalls())
func (mock *KafkaProducerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}
