// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-dimension-extractor/service"
	"github.com/ONSdigital/dp-kafka"
	"sync"
)

var (
	lockKafkaProducerMockChannels sync.RWMutex
	lockKafkaProducerMockClose    sync.RWMutex
)

// Ensure, that KafkaProducerMock does implement service.KafkaProducer.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaProducer = &KafkaProducerMock{}

// KafkaProducerMock is a mock implementation of service.KafkaProducer.
//
//     func TestSomethingThatUsesKafkaProducer(t *testing.T) {
//
//         // make and configure a mocked service.KafkaProducer
//         mockedKafkaProducer := &KafkaProducerMock{
//             ChannelsFunc: func() *kafka.ProducerChannels {
// 	               panic("mock out the Channels method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//         }
//
//         // use mockedKafkaProducer in code that requires service.KafkaProducer
//         // and then make assertions.
//
//     }
type KafkaProducerMock struct {
	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func() *kafka.ProducerChannels

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Channels holds details about calls to the Channels method.
		Channels []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Channels calls ChannelsFunc.
func (mock *KafkaProducerMock) Channels() *kafka.ProducerChannels {
	if mock.ChannelsFunc == nil {
		panic("KafkaProducerMock.ChannelsFunc: method is nil but KafkaProducer.Channels was just called")
	}
	callInfo := struct {
	}{}
	lockKafkaProducerMockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	lockKafkaProducerMockChannels.Unlock()
	return mock.ChannelsFunc()
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//     len(mockedKafkaProducer.ChannelsCalls())
func (mock *KafkaProducerMock) ChannelsCalls() []struct {
} {
	var calls []struct {
	}
	lockKafkaProducerMockChannels.RLock()
	calls = mock.calls.Channels
	lockKafkaProducerMockChannels.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *KafkaProducerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("KafkaProducerMock.CloseFunc: method is nil but KafkaProducer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockKafkaProducerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockKafkaProducerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedKafkaProducer.CloseCalls())
func (mock *KafkaProducerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockKafkaProducerMockClose.RLock()
	calls = mock.calls.Close
	lockKafkaProducerMockClose.RUnlock()
	return calls
}
