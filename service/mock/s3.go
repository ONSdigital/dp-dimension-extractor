// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-dimension-extractor/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"io"
	"sync"
)

// Ensure, that S3ClientMock does implement service.S3Client.
// If this is not the case, regenerate this file with moq.
var _ service.S3Client = &S3ClientMock{}

// S3ClientMock is a mock implementation of service.S3Client.
//
// 	func TestSomethingThatUsesS3Client(t *testing.T) {
//
// 		// make and configure a mocked service.S3Client
// 		mockedS3Client := &S3ClientMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetFunc: func(key string) (io.ReadCloser, *int64, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetWithPSKFunc: func(key string, psk []byte) (io.ReadCloser, *int64, error) {
// 				panic("mock out the GetWithPSK method")
// 			},
// 		}
//
// 		// use mockedS3Client in code that requires service.S3Client
// 		// and then make assertions.
//
// 	}
type S3ClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetFunc mocks the Get method.
	GetFunc func(key string) (io.ReadCloser, *int64, error)

	// GetWithPSKFunc mocks the GetWithPSK method.
	GetWithPSKFunc func(key string, psk []byte) (io.ReadCloser, *int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// GetWithPSK holds details about calls to the GetWithPSK method.
		GetWithPSK []struct {
			// Key is the key argument value.
			Key string
			// Psk is the psk argument value.
			Psk []byte
		}
	}
	lockChecker    sync.RWMutex
	lockGet        sync.RWMutex
	lockGetWithPSK sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *S3ClientMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("S3ClientMock.CheckerFunc: method is nil but S3Client.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedS3Client.CheckerCalls())
func (mock *S3ClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *S3ClientMock) Get(key string) (io.ReadCloser, *int64, error) {
	if mock.GetFunc == nil {
		panic("S3ClientMock.GetFunc: method is nil but S3Client.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedS3Client.GetCalls())
func (mock *S3ClientMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetWithPSK calls GetWithPSKFunc.
func (mock *S3ClientMock) GetWithPSK(key string, psk []byte) (io.ReadCloser, *int64, error) {
	if mock.GetWithPSKFunc == nil {
		panic("S3ClientMock.GetWithPSKFunc: method is nil but S3Client.GetWithPSK was just called")
	}
	callInfo := struct {
		Key string
		Psk []byte
	}{
		Key: key,
		Psk: psk,
	}
	mock.lockGetWithPSK.Lock()
	mock.calls.GetWithPSK = append(mock.calls.GetWithPSK, callInfo)
	mock.lockGetWithPSK.Unlock()
	return mock.GetWithPSKFunc(key, psk)
}

// GetWithPSKCalls gets all the calls that were made to GetWithPSK.
// Check the length with:
//     len(mockedS3Client.GetWithPSKCalls())
func (mock *S3ClientMock) GetWithPSKCalls() []struct {
	Key string
	Psk []byte
} {
	var calls []struct {
		Key string
		Psk []byte
	}
	mock.lockGetWithPSK.RLock()
	calls = mock.calls.GetWithPSK
	mock.lockGetWithPSK.RUnlock()
	return calls
}
